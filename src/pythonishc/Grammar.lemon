// All token codes are small integers with #defines that begin with "TK_"
%token_prefix TK_

// The type of the data attached to each token is Token.  This is also the
// default type for non-terminals.
//
%token_type {SToken}
%default_type {SToken}

// The generated parser function takes a 4th argument as follows:
%extra_argument {CParser *pParse}

// This code runs whenever there is a syntax error
//
%syntax_error
{
    (void)yymajor;  // Silence compiler warnings.
    pParse->OnError(TOKEN); // TOKEN has type defined in '%token_type'
}

// This code runs on LALR stack overflow
%stack_overflow
{
    (void)yypMinor; // Silence compiler warnings.
    pParse->OnStackOverflow();
}

// This code runs when parser failed and cannot recover.
%parse_failure
{
    pParse->OnFatalError();
}

// Destructor set just to disable compiler warnings
//
%token_destructor
{
    (void)yypParser;
    (void)yypminor;
    (void)pParse;
}

// The name of the generated procedure that implements the parser
// is as follows:
%name ParseGrammar

// The following text is included near the beginning of the C source
// code file that implements the parser.
//
%include
{
// Generated function: void ParseGrammar(void*, int, SToken, CParser*);

#include "Parser_private.h"

using namespace parser_private;

// Indicate that ParseGrammarFree() will never be called with a nullptr.
#define YYPARSEFREENEVERNULL 1

} // end %include

/////////////////////////
////////////////////////
///////////////////////

// An IDENTIFIER can be a generic identifier, or one of several
// keywords.  Any non-standard keyword can also be an identifier.
//
%type expression ExpressionPtr
%destructor expression { Destroy($$); }

%type statement StatementPtr
%destructor statement { Destroy($$); }

%type statement_line StatementPtr
%destructor statement_line { Destroy($$); }

%type statement_list StatementListPtr
%destructor statement_list { Destroy($$); }

%type expression_list ExpressionListPtr
%destructor expression_list { Destroy($$); }

%type function_declaration FunctionPtr
%destructor function_declaration { Destroy($$); }

%type parenthesis_parameter_list ParameterDeclListPtr
%destructor parenthesis_parameter_list { Destroy($$); }

%type parameter_list ParameterDeclListPtr
%destructor parameter_list { Destroy($$); }

%type parameter_decl ParameterDeclPtr
%destructor parameter_decl { Destroy($$); }

%type type_reference int

%left LESS EQUALS.
%left PLUS MINUS.
%left STAR SLASH PERCENT.

translation_unit ::= toplevel_list .

toplevel_list ::= toplevel_line.

toplevel_list ::= toplevel_list toplevel_line.

toplevel_line ::= toplevel_statement NEWLINE.

toplevel_line ::= error NEWLINE.

toplevel_line ::= NEWLINE.

toplevel_statement ::= function_declaration(A).
{
    pParse->AddFunction(Take(A));
}

type_reference(A) ::= STRING_TYPE.
{
    A = static_cast<int>(ExpressionType::String);
}

type_reference(A) ::= NUMBER_TYPE.
{
    A = static_cast<int>(ExpressionType::Number);
}

type_reference(A) ::= BOOLEAN_TYPE.
{
    A = static_cast<int>(ExpressionType::Boolean);
}

function_declaration(X) ::= FUNCTION ID(A) parenthesis_parameter_list(B) type_reference(D) NEWLINE statement_list(C) END.
{
    auto pParameters = Take(B);
    auto pBody = Take(C);
    ExpressionType returnType = static_cast<ExpressionType>(D);
    EmplaceAST<CFunctionAST>(X, A.stringId, returnType, std::move(*pParameters), std::move(*pBody));
}

parenthesis_parameter_list(X) ::= LPAREN RPAREN.
{
    X = Make<ParameterDeclList>().release();
}

parenthesis_parameter_list(X) ::= LPAREN parameter_list(A) RPAREN.
{
    MovePointer(A, X);
}

parameter_list(X) ::= parameter_decl(A).
{
    CreateList(X, A);
}

parameter_list(X) ::= parameter_list(A) COMMA parameter_decl(B).
{
    ConcatList(X, A, B);
}

parameter_decl(X) ::= ID(A) type_reference(B).
{
    EmplaceAST<CParameterDeclAST>(X, A.stringId, static_cast<ExpressionType>(B));
}

statement_list(X) ::= statement_line(A).
{
    CreateList(X, A);
}

statement_list(X) ::= statement_list(A) statement_line(B).
{
    ConcatList(X, A, B);
}

statement_line(X) ::= statement(A) NEWLINE.
{
    MovePointer(A, X);
}

statement_line(X) ::= error NEWLINE.
{
    X = nullptr;
}

statement(X) ::= ID(A) ASSIGN expression(B).
{
    EmplaceAST<CAssignAST>(X, A.stringId, Take(B));
}

statement(X) ::= PRINT expression(A).
{
    EmplaceAST<CPrintAST>(X, Take(A));
}

statement(X) ::= RETURN expression(A).
{
    EmplaceAST<CReturnAST>(X, Take(A));
}

statement(X) ::= IF expression(A) NEWLINE END.
{
    EmplaceAST<CIfAst>(X, Take(A));
}

statement(X) ::= IF expression(A) NEWLINE statement_list(B) END.
{
    auto pThenBody = Take(B);
    EmplaceAST<CIfAst>(X, Take(A), std::move(*pThenBody));
}

statement(X) ::= IF expression(A) NEWLINE statement_list(B) ELSE NEWLINE statement_list(C) END.
{
    auto pThenBody = Take(B);
    auto pElseBody = Take(C);
    EmplaceAST<CIfAst>(X, Take(A), std::move(*pThenBody), std::move(*pElseBody));
}

statement(X) ::= WHILE expression(A) NEWLINE END.
{
    EmplaceAST<CWhileAst>(X, Take(A));
}

statement(X) ::= WHILE expression(A) NEWLINE statement_list(B) END.
{
    auto pBody = Take(B);
    EmplaceAST<CWhileAst>(X, Take(A), std::move(*pBody));
}

statement(X) ::= DO NEWLINE WHILE expression(A) END.
{
    EmplaceAST<CRepeatAst>(X, Take(A));
}

statement(X) ::= DO NEWLINE statement_list(A) WHILE expression(B) END.
{
    auto pBody = Take(A);
    EmplaceAST<CRepeatAst>(X, Take(B), std::move(*pBody));
}

expression_list(X) ::= expression(A).
{
    CreateList(X, A);
}

expression_list(X) ::= expression_list(A) COMMA expression(B).
{
    ConcatList(X, A, B);
}

expression(X) ::= ID(A) LPAREN RPAREN.
{
    EmplaceAST<CCallAST>(X, A.stringId, ExpressionList());
}

expression(X) ::= ID(A) LPAREN expression_list(B) RPAREN.
{
    auto pList = Take(B);
    EmplaceAST<CCallAST>(X, A.stringId, std::move(*pList));
}

expression(X) ::= LPAREN expression(A) RPAREN.
{
    MovePointer(A, X);
}

expression(X) ::= expression(A) LESS expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Less, Take(B));
}

expression(X) ::= expression(A) EQUALS expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Equals, Take(B));
}

expression(X) ::= expression(A) PLUS expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Add, Take(B));
}

expression(X) ::= expression(A) MINUS expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Substract, Take(B));
}

expression(X) ::= expression(A) STAR expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Multiply, Take(B));
}

expression(X) ::= expression(A) SLASH expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Divide, Take(B));
}

expression(X) ::= expression(A) PERCENT expression(B).
{
    EmplaceAST<CBinaryExpressionAST>(X, Take(A), BinaryOperation::Modulo, Take(B));
}

expression(X) ::= PLUS expression(A).
{
    EmplaceAST<CUnaryExpressionAST>(X, UnaryOperation::Plus, Take(A));
}

expression(X) ::= MINUS expression(A).
{
    EmplaceAST<CUnaryExpressionAST>(X, UnaryOperation::Minus, Take(A));
}

expression(X) ::= NUMBER_VALUE(A).
{
    EmplaceAST<CLiteralAST>(X, CLiteralAST::Value(A.value));
}

expression(X) ::= STRING_VALUE(A).
{
    EmplaceAST<CLiteralAST>(X, pParse->GetStringLiteral(A.stringId));
}

expression(X) ::= BOOLEAN_VALUE(A).
{
    EmplaceAST<CLiteralAST>(X, CLiteralAST::Value(A.boolValue));
}

expression(X) ::= ID(A).
{
    EmplaceAST<CVariableRefAST>(X, A.stringId);
}
